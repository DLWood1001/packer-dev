# -*- mode: ruby -*-
# vi: set ft=ruby ts=2 sw=2 sts=2 et :


# General Settings
# ----------------

# General Provider Settings
provider_cpus = 4
provider_memory = 4096


# Default Vagrant Settings
# ------------------------
Vagrant.configure("2") do |config|

  # Default Vagrant Overrides
  # -------------------------
  config.ssh.username = "admin"

  config.vm.guest = "redhat"

  config.ssh.insert_key = false

  config.vm.synced_folder ".", "/vagrant",
     disabled: true

  config.vm.synced_folder ".", "/home/admin/Development",
     create: true,
     disabled: false

  config.vm.network :private_network,
     virtualbox__intnet: "fm_test_lan",
     ip: "172.16.1.10",
     netmask: "255.255.255.0"

  # Default Provider Overrides
  # --------------------------

  # VirtualBox
  config.vm.provider :virtualbox do |vbox_config|
    # General Provider Settings
    # -------------------------
    vbox_config.cpus = provider_cpus
    vbox_config.memory = provider_memory 

    # Custom Provider Settings
    # ------------------------

    # Display Settings
    vbox_config.gui = true
    vbox_config.customize ["modifyvm", :id, "--vram", "96"]
    vbox_config.customize ["setextradata", :id, "GUI/MaxGuestResolution", "auto"]

    # Storage Settings
    vbox_config.customize [
      "storageattach", :id,
      "--storagectl", "IDE Controller",
      "--port", "1",
      "--device", "0",
      "--type", "dvddrive",
      "--medium", "emptydrive"
    ]

    # Misc Settings
    vbox_config.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
    vbox_config.customize ["modifyvm", :id, "--draganddrop", "hosttoguest"]
  end

  # Libvirt
  config.vm.provider :libvirt do |libvirt_config|
    # General Provider Settings
    # -------------------------
    libvirt_config.cpus = provider_cpus
    libvirt_config.memory = provider_memory 

    # Custom Provider Settings
    # ------------------------

    # Display Settings
    libvirt_config.graphics_type = "spice"
    libvirt_config.graphics_autoport = "yes"
    libvirt_config.video_type = "qxl"

    # Communication Channels
    # Note(Dan): This allows for display reszing.
    libvirt_config.channel :type => "spicevmc",
                           :target_name => "com.redhat.spice.0",
                           :target_type => "virtio"

    libvirt_config.channel :type => "unix",
                           :target_name => "org.qemu.guest_agent.0",
                           :target_type => "virtio"
  end


  # Provisioner Settings
  # --------------------
  box_proxy = ENV['http_proxy']
  if not box_proxy
    box_proxy = false
  end

  box_proxy_provisioner = <<-'PROVISIONER_EOL'
#!/bin/bash

box_proxy=$1
if [ "${box_proxy}" == "false" ]; then
  exit 0
fi

box_proxy=$(echo ${box_proxy} | perl -pe 's%^https?://([^:]+:\d+).*?$%\1%g')
IFS=: read box_host box_port <<< ${box_proxy}

cat >/etc/dconf/db/site.d/proxy <<PROXY_EOL

# Proxy Settings
# --------------
[system/proxy]
mode='manual'
ignore-hosts=['localhost', '127.0.0.0/8', '::1', '10.0.0.0/8', '172.16.0.0/16', '192.168.0.0/16']

[system/proxy/http]
enabled=true
host='${box_host}'
port=${box_port}

[system/proxy/https]
enabled=true
host='${box_host}'
port=${box_port}

PROXY_EOL

dconf update

PROVISIONER_EOL

  config.vm.provision "shell",
    name: "Proxy Setup",
    inline: box_proxy_provisioner,
    args: ["#{box_proxy}"]


  # Additional Plugin Settings
  # --------------------------
  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
    config.vbguest.no_install = true
  end

  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.enabled = false
  
    box_proxy_enabled = {
      http: false,
      https: false, 
      yum: false,
      apt: false, 
      docker: false, 
      git: false, 
      npm: false, 
      pear: false, 
      subversion: false, 
      windows: false
    }

    if ENV['http_proxy'] 
      box_proxy_enabled[:http] = true
      config.proxy.http = ENV['http_proxy']
    end

    if ENV['https_proxy']
      box_proxy_enabled[:https] = true
      config.proxy.https = ENV['https_proxy']
    end

    if box_proxy_enabled.values.include? true
      config.proxy.enabled = box_proxy_enabled
    end
  end
end
