---
- name: Install Profiles
  hosts: "{{hosts|d(host|d('all'))}}"
  gather_facts: no
 
  # Todo:
  # 1) Fix Key Issue
  # 2) Make Passwords Cryptoless

  vars:
    profiles:
      admin:
        name: admin
        group: admin
        uid: 1000
        gid: 1000
        comment: Administrator
        shell: /bin/bash
        skeleton: /etc/skel
        password: password
        admin: true

      support:
        name: support
        group: support
        uid: 1001
        gid: 1001
        comment: Support
        shell: /bin/bash
        skeleton: /etc/skel
        password: password
        admin: true

      vagrant:
        name: vagrant
        group: vagrant
        uid: 1002
        gid: 1002
        comment: Vagrant
        shell: /bin/bash
        skeleton: /etc/skel
        password: vagrant
        admin: false
        vagrant: true

    defaults:
      admin: false
      vagrant: false

    vagrant_public_key: "https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub"

  environment:
    http_proxy: "{{http_proxy|default(None)}}"
    https_proxy: "{{https_proxy|default(None)}}"

  tasks:
    # Initialize
    # ----------
    - name: Determine System Facts
      setup:

    # Note (Dan): Allows me to kill off some default({}) and d({}) parameters.
    - name: Initialize Variables
      set_fact:
        profiles: {}
      when:
        - profiles is not defined


    # Normalize
    # ---------
    - name: Normalize Defaults
      set_fact:
        profiles: >-
          {%- set result = {} -%}
          {%- for k, v in profiles.items() -%}
            {%- set v = defaults|combine(v|d({})) -%}

            {%- set _ = result.update({k: v}) -%}
          {%- endfor -%}
          {{- result -}}

    - name: Build Normalized Passwords
      set_fact:
        profiles: >-
          {%- set result = {} -%}
          {%- for k, v in profiles.items() -%}
            {%- if v.password is defined -%}
              {%- set sha512  =  v.password|password_hash('sha512') -%}
              {%- set _ = v.update({'sha512': sha512}) -%}

            {%- endif -%}

            {%- set _ = result.update({k: v}) -%}
          {%- endfor -%}
          {{- result -}}

    - name: Normalize Vagrant Users
      set_fact:
        profiles: >-
          {%- set result = {} -%}
          {%- for k, v in profiles.items() -%}
            {%- if v.vagrant -%}
              {%- set _ = v.update({'admin': true}) -%}

            {%- endif -%}

            {%- set _ = result.update({k: v}) -%}
          {%- endfor -%}
          {{- result -}}


    # Admin Group
    # -----------
    - name: Determine Admin Group - Debian Family
      set_fact:
        admin_group: sudo
      when: 
        - ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Determine Admin Group - RedHat Family
      set_fact:
        admin_group: wheel
      when: 
        - ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

    - name: Build Admin Profile Groups
      set_fact:
        profiles: >-
          {%- set result = {} -%}
          {%- for k, v in profiles.items() -%}
            {%- if v.admin|d(false) -%}
              {%- set groups = v.groups|d([]) + [admin_group] -%}

              {%- set _ = v.update({'groups': groups}) -%}
            {%- endif -%}

            {%- set _ = result.update({k: v}) -%}
          {%- endfor -%}
          {{- result -}}


    # User Setup
    # ----------
    - name: Create User Group
      group:
        name: "{{profiles[item].group}}"
        gid: "{{profiles[item].gid|default(omit)}}"
        state: present
      when: profiles[item].group is defined
      with_items: "{{profiles}}"

    - name: "Create User Profile"
      user:
        name: "{{profiles[item].name|default(item)}}"
        uid: "{{profiles[item].uid|default(omit)}}"
        comment: "{{profiles[item].comment|default(omit)}}"
        group: "{{profiles[item].group|default(omit)}}"
        groups: "{{profiles[item].groups|default(omit)}}"
        shell: "{{profiles[item].shell|default(omit)}}"
        skeleton: "{{profiles[item].skeleton|default(omit)}}"
        password: "{{profiles[item].sha512|default(omit)}}"
        state: present
      with_items: "{{profiles}}"

    - name: Install Public Key
      authorized_key:
        user: "{{profiles[item].name|default(item)}}"
        state: present
        key: "{{profiles[item].public_key}}"
        validate_certs: no
      when: profiles[item].public_key is defined
      with_items: "{{profiles}}"


    # Vagrant
    # -------
    - name: Install Vagrant Profile Sudo Overrides
      template:
        src: vagrant.sudoers.j2
        dest: "/etc/sudoers.d/{{profiles[item].name|default(item)}}"
        mode: 0400
      when: profiles[item].vagrant|default(false) == true
      with_items: "{{profiles}}"

    - name: Install Vagrant Public Key
      authorized_key:
        user: "{{profiles[item].name|default(item)}}"
        key: "{{vagrant_public_key}}"
        validate_certs: no
        state: present
      when: profiles[item].vagrant|default(false) == true
      with_items: "{{profiles}}"

